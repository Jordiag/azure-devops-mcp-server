trigger: none

resources:
  pipelines:
    - pipeline: buildPipeline
      source: Build

pool:
  vmImage: 'windows-latest'

variables:
  - group: 'Integration tests'
  - name: buildConfiguration
    value: 'Release'
  - name: solution
    value: 'Dotnet.AzureDevOps.sln'
  - name: sonarProjectKey
    value: 'Chanlabs_Dotnet.AzureDevOps'
  - name: sonarOrganization
    value: 'chanlabs-1'
  - name: mcpServerPort
    value: '5050'
  - name: mcpServerUrl
    value: 'http://localhost:$(mcpServerPort)'

steps:
- checkout: self

# Check .NET version and install if needed
- task: PowerShell@2
  displayName: 'Setup .NET 9.0'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Checking .NET installation..."
      dotnet --version
      dotnet --list-sdks
      
      # If .NET 9.0 is not available, the build will fail with a clear error
      # Azure DevOps hosted agents should have .NET 9.0 available
      Write-Host "Current .NET version check completed"

# Restore NuGet packages
- task: DotNetCoreCLI@2
  displayName: 'Restore packages'
  inputs:
    command: 'restore'
    projects: '$(solution)'
    feedsToUse: 'select'

# Build solution
- task: DotNetCoreCLI@2
  displayName: 'Build solution'
  inputs:
    command: 'build'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration) --no-restore'

# Start MCP Server in background
- task: PowerShell@2
  displayName: 'Start MCP Server'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Starting MCP Server"
      
      # Start the server using dotnet run in background
      $env:ASPNETCORE_URLS = "$(mcpServerUrl)"
      
      # Start process in background using dotnet run
      $process = Start-Process -FilePath "dotnet" -ArgumentList "run --project src/Dotnet.AzureDevOps.Mcp.Server/Dotnet.AzureDevOps.Mcp.Server.csproj --configuration $(buildConfiguration)" -PassThru -NoNewWindow
      
      # Store PID for later cleanup
      Write-Host "##vso[task.setvariable variable=mcpServerPid]$($process.Id)"
      Write-Host "MCP Server started with PID: $($process.Id)"
      
      # Wait for server to be ready
      $maxRetries = 30
      $retryCount = 0
      
      do {
        try {
          $response = Invoke-WebRequest -Uri "$(mcpServerUrl)/health" -Method Get -TimeoutSec 2
          if ($response.StatusCode -eq 200) {
            Write-Host "MCP Server is ready and responding"
            break
          }
        }
        catch {
          Write-Host "Waiting for MCP Server to start... ($retryCount/$maxRetries)"
          Start-Sleep -Seconds 2
          $retryCount++
        }
      } while ($retryCount -lt $maxRetries)
      
      if ($retryCount -eq $maxRetries) {
        Write-Error "MCP Server failed to start within timeout period"
        exit 1
      }

# Test MCP Server Connectivity
- task: PowerShell@2
  displayName: 'Test MCP Server Connectivity'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Testing MCP Server connectivity..."
      
      try {
        $response = Invoke-WebRequest -Uri "$(mcpServerUrl)/health" -Method Get
        Write-Host "Health check response: $($response.StatusCode)"
        Write-Host "Server is accessible"
      }
      catch {
        Write-Error "Failed to connect to MCP Server: $($_.Exception.Message)"
        exit 1
      }

 # Run tests
- task: PowerShell@2
  displayName: 'Run Tests with Detailed Output'
  inputs:
    targetType: 'inline'
    script: |
      $testProject = "test/end2end.tests/Dotnet.AzureDevOps.Mcp.Server.Agent.Tests/Dotnet.AzureDevOps.Mcp.Server.Agent.Tests.csproj"
      
      if (!(Test-Path $testProject)) {
        Write-Error "Test project not found at: $testProject"
        exit 1
      }
      
      dotnet build $testProject --configuration $(buildConfiguration)
      if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
      
      dotnet test $testProject `
        --configuration $(buildConfiguration) `
        --no-build `
        --verbosity detailed `
        --collect:"XPlat Code Coverage" `
        --logger "console;verbosity=detailed" `
        --logger "trx;LogFileName=TestResults.trx" `
        --results-directory "$(Agent.TempDirectory)"
  env:
    AZURE_DEVOPS_PAT: $(AZURE_DEVOPS_PAT)
    AZURE_DEVOPS_PIPELINE_ID: $(AZURE_DEVOPS_PIPELINE_ID)
    AZURE_DEVOPS_PROJECT_ID: $(AZURE_DEVOPS_PROJECT_ID)
    AZURE_DEVOPS_REPO_ID: $(AZURE_DEVOPS_REPO_ID)
    AZURE_DEVOPS_REPOSITORY_ID: $(AZURE_DEVOPS_REPOSITORY_ID)
    OPENAI_API_KEY: $(OPENAI_API_KEY)
    AZURE_OPENAI_DEPLOYMENT: $(AZURE_OPENAI_DEPLOYMENT)
    AZURE_OPENAI_ENDPOINT: $(AZURE_OPENAI_ENDPOINT)
    AZURE_OPENAI_KEY: $(AZURE_OPENAI_KEY)

# Stop MCP Server
- task: PowerShell@2
  displayName: 'Stop MCP Server'
  condition: always()
  inputs:
    targetType: 'inline'
    script: |
      $mcpPid = "$(mcpServerPid)"
      if ($mcpPid -and $mcpPid -ne "" -and $mcpPid -ne "$(mcpServerPid)") {
        try {
          Write-Host "Attempting to stop MCP server with PID: $mcpPid"
          Stop-Process -Id $mcpPid -Force -ErrorAction Stop
          Write-Host "Successfully stopped MCP server (PID $mcpPid)"
        } catch {
          Write-Warning "Failed to stop MCP server by PID: $($_.Exception.Message)"
        }
      } else {
        Write-Warning "No valid PID found for MCP server. PID variable was: '$mcpPid'"
      }
      
      # Also try to kill any dotnet processes running the MCP server
      try {
        Write-Host "Looking for any remaining MCP server processes..."
        $mcpProcesses = Get-Process -Name "dotnet" -ErrorAction SilentlyContinue | Where-Object { 
          $_.ProcessName -eq "dotnet" -and 
          $_.MainWindowTitle -like "*Dotnet.AzureDevOps.Mcp.Server*" 
        }
        
        if ($mcpProcesses) {
          foreach ($process in $mcpProcesses) {
            try {
              Stop-Process -Id $process.Id -Force
              Write-Host "Stopped additional MCP server process (PID $($process.Id))"
            } catch {
              Write-Warning "Failed to stop process $($process.Id): $($_.Exception.Message)"
            }
          }
        } else {
          Write-Host "No additional MCP server processes found"
        }
      } catch {
        Write-Warning "Failed to search for additional MCP server processes: $($_.Exception.Message)"
      }
      
      # Final cleanup - try to stop any process listening on the MCP port
      try {
        Write-Host "Checking for processes using port $(mcpServerPort)..."
        $netstat = netstat -ano | Select-String ":$(mcpServerPort)"
        if ($netstat) {
          Write-Host "Found processes using port $(mcpServerPort):"
          $netstat | ForEach-Object { Write-Host $_ }
          
          # Extract PIDs and try to stop them
          $netstat | ForEach-Object {
            if ($_ -match '\s+(\d+)$') {
              $portPid = $Matches[1]
              try {
                $proc = Get-Process -Id $portPid -ErrorAction Stop
                if ($proc.ProcessName -eq "dotnet") {
                  Stop-Process -Id $portPid -Force
                  Write-Host "Stopped process using port $(mcpServerPort) (PID $portPid)"
                }
              } catch {
                Write-Host "Process $portPid may have already exited"
              }
            }
          }
        } else {
          Write-Host "No processes found using port $(mcpServerPort)"
        }
      } catch {
        Write-Warning "Failed to check port usage: $($_.Exception.Message)"
      }
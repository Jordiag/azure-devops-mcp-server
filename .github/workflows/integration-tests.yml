name: PR integration tests

on:
  pull_request:
    branches: [main]               # run for PRs targeting main
    types:  [opened, synchronize, reopened]

jobs:
  integration-tests:
    runs-on: windows-latest

    # ─────── shared / non-secret variables ───────
    env:
      BUILD_CONFIGURATION: Release
      SOLUTION: Dotnet.AzureDevOps.sln
      SONAR_PROJECT_KEY: Chanlabs_Dotnet.AzureDevOps
      SONAR_ORGANIZATION: chanlabs-1

    steps:
    # ─────────────────────────── Checkout ───────────────────────────
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0                         # keeps full history for Sonar PR decoration

    # ──────────────────────── .NET 9 preview SDK ────────────────────
    - name: Set up .NET 9 SDK (preview)
      uses: actions/setup-dotnet@v4                  :contentReference[oaicite:0]{index=0}
      with:
        dotnet-version: '9.0.x'
        dotnet-quality: preview                     # = includePreviewVersions: true

    # ────────────────────────── SonarCloud Begin ─────────────────────
    - name: Install SonarScanner for .NET
      run: dotnet tool install --global dotnet-sonarscanner

    - name: SonarCloud – begin analysis
      run: >
        dotnet sonarscanner begin
        /k:"${{ env.SONAR_PROJECT_KEY }}"
        /o:"${{ env.SONAR_ORGANIZATION }}"
        /d:sonar.host.url="https://sonarcloud.io"
        /d:sonar.cs.opencover.reportsPaths="$(pwd)/**/coverage.opencover.xml"
        /d:sonar.pullrequest.key="${{ github.event.pull_request.number }}"
        /d:sonar.pullrequest.branch="${{ github.head_ref }}"
        /d:sonar.pullrequest.base="${{ github.base_ref }}"
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}     # add this secret in repo/organisation

    # ────────────────────────── Restore / Build ─────────────────────
    - name: Restore packages
      run: dotnet restore "${{ env.SOLUTION }}"

    - name: Build solution
      run: dotnet build "${{ env.SOLUTION }}" --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

    # ──────────────────────────── Integration tests ─────────────────
    - name: Run integration tests with coverage
      run: >
        dotnet test
        **/test/integration.tests/**/*.csproj
        --configuration ${{ env.BUILD_CONFIGURATION }}
        --no-build
        --collect:"XPlat Code Coverage"
        --logger:"trx"
      env:                                    # secrets injected exactly as in ADO
        AZURE_DEVOPS_PAT:            ${{ secrets.AZURE_DEVOPS_PAT }}
        AZURE_DEVOPS_PIPELINE_ID:    ${{ secrets.AZURE_DEVOPS_PIPELINE_ID }}
        AZURE_DEVOPS_PROJECT_ID:     ${{ secrets.AZURE_DEVOPS_PROJECT_ID }}
        AZURE_DEVOPS_REPO_ID:        ${{ secrets.AZURE_DEVOPS_REPO_ID }}
        AZURE_DEVOPS_REPOSITORY_ID:  ${{ secrets.AZURE_DEVOPS_REPOSITORY_ID }}
        OPENAI_API_KEY:              ${{ secrets.OPENAI_API_KEY }}
        AZURE_OPENAI_DEPLOYMENT:     ${{ secrets.AZURE_OPENAI_DEPLOYMENT }}
        AZURE_OPENAI_ENDPOINT:       ${{ secrets.AZURE_OPENAI_ENDPOINT }}
        AZURE_OPENAI_KEY:            ${{ secrets.AZURE_OPENAI_KEY }}

    # (optional) upload coverage artefact if you still need the file
    # - uses: actions/upload-artifact@v4
    #   with:
    #     name: coverage
    #     path: '**/coverage.opencover.xml'

    # ────────────────────────── SonarCloud End ──────────────────────
    - name: SonarCloud – end analysis & quality-gate
      run: dotnet sonarscanner end
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

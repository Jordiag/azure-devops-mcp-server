name: Integration Tests

on:
  workflow_run:
    workflows: ["Build on main"]
    types:
      - completed

jobs:
  integration-tests:
    runs-on: windows-latest

    env:
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
      solution: 'Dotnet.AzureDevOps.sln'
      sonarProjectKey: 'Chanlabs_Dotnet.AzureDevOps'
      sonarOrganization: 'chanlabs-1'
      AZURE_DEVOPS_PAT: ${{ secrets.AZURE_DEVOPS_PAT }}
      AZURE_DEVOPS_PIPELINE_ID: ${{ secrets.AZURE_DEVOPS_PIPELINE_ID }}
      AZURE_DEVOPS_PROJECT_ID: ${{ secrets.AZURE_DEVOPS_PROJECT_ID }}
      AZURE_DEVOPS_REPO_ID: ${{ secrets.AZURE_DEVOPS_REPO_ID }}
      AZURE_DEVOPS_REPOSITORY_ID: ${{ secrets.AZURE_DEVOPS_REPOSITORY_ID }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      AZURE_OPENAI_DEPLOYMENT: ${{ secrets.AZURE_OPENAI_DEPLOYMENT }}
      AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
      AZURE_OPENAI_KEY: ${{ secrets.AZURE_OPENAI_KEY }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'  # or the version used in your solution

      - name: Install NuGet
        uses: NuGet/setup-nuget@v1

      - name: Restore NuGet packages
        run: nuget restore "${{ env.solution }}"

      - name: SonarCloud - Begin Analysis
        uses: SonarSource/sonarcloud-github-action@master
        with:
          organization: ${{ env.sonarOrganization }}
          projectKey: ${{ env.sonarProjectKey }}
          projectName: 'Dotnet.AzureDevOps'
          projectVersion: '0.1.0'
          extraProperties: |
            sonar.cs.vscoveragexml.reportsPaths=${{ runner.temp }}/**/*.coveragexml
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Build Solution
        run: msbuild "${{ env.solution }}" /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="${{ github.workspace }}/artifacts" /p:Platform="${{ env.buildPlatform }}" /p:Configuration="${{ env.buildConfiguration }}"

      - name: Run Tests with Coverage
        run: |
          dotnet test ${{ env.solution }} \
            --configuration "${{ env.buildConfiguration }}" \
            --settings "${{ github.workspace }}/.runsettings" \
            --collect:"Code Coverage" \
            --no-build
        continue-on-error: true

      - name: SonarCloud - End Analysis
        run: dotnet-sonarscanner end
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/**'
      - 'README.md'
      - 'README.*.md'
      - '**/README.md'
      - '**/README.*.md'

  pull_request:
    paths-ignore:
      - '.github/workflows/**'
      - 'README.md'
      - 'README.*.md'
      - '**/README.md'
      - '**/README.*.md'

  workflow_dispatch:

jobs:
  integration-tests:
    runs-on: windows-latest
    env:
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
      solution: 'Dotnet.AzureDevOps.sln'
      sonarProjectKey: 'Jordiag_azure-devops-mcp-server'
      sonarOrganization: 'jordiag-mozcode'
      AZURE_DEVOPS_PAT: ${{ secrets.AZURE_DEVOPS_PAT }}
      AZURE_DEVOPS_PIPELINE_ID: ${{ secrets.AZURE_DEVOPS_PIPELINE_ID }}
      AZURE_DEVOPS_PROJECT_ID: ${{ secrets.AZURE_DEVOPS_PROJECT_ID }}
      AZURE_DEVOPS_REPO_ID: ${{ secrets.AZURE_DEVOPS_REPO_ID }}
      AZURE_DEVOPS_REPOSITORY_ID: ${{ secrets.AZURE_DEVOPS_REPOSITORY_ID }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      AZURE_OPENAI_DEPLOYMENT: ${{ secrets.AZURE_OPENAI_DEPLOYMENT }}
      AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
      AZURE_OPENAI_KEY: ${{ secrets.AZURE_OPENAI_KEY }}
      AZURE_DEVOPS_BOT_USER_EMAIL: ${{ vars.AZURE_DEVOPS_BOT_USER_EMAIL }}
      AZURE_DEVOPS_BUILD_BRANCH: ${{ vars.AZURE_DEVOPS_BUILD_BRANCH }}
      AZURE_DEVOPS_COMMIT_SHA: ${{ vars.AZURE_DEVOPS_COMMIT_SHA }}
      AZURE_DEVOPS_MAIN_BRANCH_NAME: ${{ vars.AZURE_DEVOPS_MAIN_BRANCH_NAME }}
      AZURE_DEVOPS_ORG_URL: ${{ vars.AZURE_DEVOPS_ORG_URL }}
      AZURE_DEVOPS_SEARCH_ORG_URL: ${{ vars.AZURE_DEVOPS_SEARCH_ORG_URL }}
      AZURE_DEVOPS_ORG:  ${{ vars.AZURE_DEVOPS_ORG }}
      AZURE_DEVOPS_PROJECT_NAME: ${{ vars.AZURE_DEVOPS_PROJECT_NAME }}
      AZURE_DEVOPS_REPO_NAME: ${{ vars.AZURE_DEVOPS_REPO_NAME }}
      AZURE_DEVOPS_SRC_BRANCH: ${{ vars.AZURE_DEVOPS_SRC_BRANCH }}
      AZURE_DEVOPS_TARGET_BRANCH: ${{ vars.AZURE_DEVOPS_TARGET_BRANCH }}
      MCP_SERVER_URL: ${{ vars.MCP_SERVER_URL }}
      OPENAI_MODEL: ${{ vars.OPENAI_MODEL }}
      USE_AZURE_OPENAI: ${{ vars.USE_AZURE_OPENAI }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for SonarCloud analysis

      - name: Determine version (reachable from HEAD)
        id: ver
        shell: bash
        run: |
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          TAG=${TAG#v}
          [[ $TAG =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] || TAG="0.0.0"
          BUILD=${GITHUB_RUN_NUMBER}
          echo "base=$TAG" >> $GITHUB_OUTPUT
          echo "full=$TAG.$BUILD" >> $GITHUB_OUTPUT
          echo "Informational=$TAG.$BUILD+${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Install NuGet
        uses: NuGet/setup-nuget@v1

      - name: Install SonarCloud Scanner for .NET
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Install Coverage Tool
        run: dotnet tool install --global dotnet-coverage

      - name: Set cache date
        id: cache-date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ steps.cache-date.outputs.date }}
          restore-keys: |
            nuget-${{ runner.os }}-
            nuget-

      - name: Restore NuGet packages
        run: nuget restore "${{ env.solution }}"
      
      - name: Set Sonar PR Analysis Parameters (if pull_request)
        if: github.event_name == 'pull_request'
        run: |
          dotnet sonarscanner begin `
            /k:"${{ env.sonarProjectKey }}" `
            /o:"${{ env.sonarOrganization }}" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.cs.vscoveragexml.reportsPaths="coverage.xml" `
            /d:sonar.dotnet.excludeTestProjects=true `
            /d:sonar.pullrequest.key="${{ github.event.pull_request.number }}" `
            /d:sonar.pullrequest.branch="${{ github.head_ref }}" `
            /d:sonar.pullrequest.base="${{ github.base_ref }}"
        shell: pwsh

    # -- Sonar Begin (Non-PR: workflow_run or manual) --
      - name: Begin SonarCloud Analysis (Non-PR)
        if: github.event_name != 'pull_request'
        run: |
          dotnet sonarscanner begin `
            /k:"${{ env.sonarProjectKey }}" `
            /o:"${{ env.sonarOrganization }}" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.cs.vscoveragexml.reportsPaths="coverage.xml" `
            /d:sonar.dotnet.excludeTestProjects=true
      
      - name: Build with Dotnet
        shell: pwsh
        run: dotnet build "${{ env.solution }}" -c "${{ env.buildConfiguration }}" --no-restore `
          -p:Version=${{ steps.ver.outputs.base }} `
          -p:AssemblyVersion=${{ steps.ver.outputs.full }} `
          -p:FileVersion=${{ steps.ver.outputs.full }} `
          "-p:InformationalVersion=${{ steps.ver.outputs.Informational }}"

      - name: Run Tests with Coverage
        run: |
          dotnet test "${{ env.solution }}" `
            -c "${{ env.buildConfiguration }}" `
            --filter "TestType!=End2End" `
            --no-restore --no-build `
            --settings "${{ github.workspace }}/.runsettings" `
            --collect:"Code Coverage" `
            --results-directory ./TestResults/ `
            --logger "trx"
        shell: pwsh
        continue-on-error: false

      - name: Convert Coverage to XML
        run: |
          dotnet-coverage merge ./TestResults/**/*.coverage --output coverage.xml --output-format xml
        shell: pwsh
        continue-on-error: false

      - name: End SonarCloud Analysis
        run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

